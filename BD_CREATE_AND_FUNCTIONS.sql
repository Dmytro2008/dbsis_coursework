CREATE TABLE IF NOT EXISTS customers(
	customer_id INT GENERATED BY DEFAULT AS IDENTITY,
	customer_name varchar(50),
	customer_age INT NOT NULL,
	customer_email varchar(256) NOT NULL,
	customer_password varchar(256) NOT NULL,
	customer_login varchar(256) NOT NULL UNIQUE,
	bank_card varchar(256) NOT NULL UNIQUE,
	PRIMARY KEY(customer_id),
	CHECK(customer_age >= 18),
	CHECK(LENGTH(customer_login)>=6),
	CHECK(LENGTH(customer_password)>=6)
);

CREATE TABLE IF NOT EXISTS contracts(
	contract_id INT GENERATED BY DEFAULT AS IDENTITY,
	fk_customer_id INT,
	contract_date date DEFAULT CURRENT_DATE,
	contract_type varchar(50) NOT NULL,
	contract_price float(2) NOT NULL,
	contract_end_date date NOT NULL,
	PRIMARY KEY(contract_id),
	CHECK (contract_price > 5 AND contract_price < 150),
	CONSTRAINT fk_contact
		FOREIGN KEY (fk_customer_id)
			REFERENCES customers(customer_id)
);

CREATE TABLE IF NOT EXISTS children_contracts(
	child_id INT GENERATED BY DEFAULT AS IDENTITY,
	fk_customer_id INT,
	child_name varchar(50),
	contract_date date DEFAULT CURRENT_DATE,
	contract_type varchar(50) NOT NULL,
	contract_price float(2) NOT NULL,
	contract_end_date date NOT NULL,
	PRIMARY KEY(child_id),
	CHECK (contract_price > 5 AND contract_price < 15),
	CONSTRAINT fk_contact
		FOREIGN KEY (fk_customer_id)
			REFERENCES customers(customer_id)
);


//
-- Get information about customer by cust_id

create or replace function get_customer_info(
   c_id int
) RETURNS customers 
language sql
as 
$body$
  select * from customers 
  where customers.customer_id = c_id;  
$body$;

--SELECT get_customer_info(2);
//
-- Get information about regular contracts by cust_id and creation date

create or replace function get_contract_by_cust(
   c_id int
) RETURNS contracts
language sql
as 
$body$
  select * from contracts
  where contracts.fk_customer_id = c_id;  
$body$;

create or replace function get_contract_by_date(
   c_date date
) RETURNS contracts
language sql
as 
$body$
  select * from contracts
  where contracts.contract_date = c_date;  
$body$;


--SELECT get_contract_by_cust(2);
//
-- Get information about children contracts by cust_id and creation date

create or replace function get_child_contract_by_cust(
   c_id int
) RETURNS children_contracts
language sql
as 
$body$
  select * from children_contracts
  where children_contracts.fk_customer_id = c_id;  
$body$;


create or replace function get_child_contract_by_date(
   c_date date
) RETURNS children_contracts
language sql
as 
$body$
  select * from children_contracts
  where children_contracts.contract_date = c_date;  
$body$;

--SELECT get_child_contract_by_cust(2);
//
-- Registration

create or replace function register_customer(
	customer_login_v customers.customer_login%type, 
    customer_password_v customers.customer_password%type, 
    customer_email_v customers.customer_email%type, 
    customer_age_v customers.customer_age%type,
    customer_name_v customers.customer_name%type,
	bank_card_v customers.bank_card%type
) returns text
language plpgsql
as
$body$
declare
   status text;
begin
	
	IF customer_name_v LIKE '' then
	customer_name_v := NULL;
	END IF;

	INSERT INTO customers(customer_name,customer_age,customer_email,customer_password,customer_login,bank_card) 
	VALUES (customer_name_v,customer_age_v,customer_email_v,customer_password_v,customer_login_v,bank_card_v);
	status := '�������� ����� ��������!';
	
	return status;
	exception 
	   when others then 
	      status := '������� ������� ��� ������� ��������� ������!';
		  return status;
end;
$body$


//
-- Login

create or replace function login_customer(
	customer_login_email customers.customer_login%type, 
    customer_password_v customers.customer_password%type 
) returns INT
language plpgsql
as
$body$
declare
   found_id INT;
begin

	SELECT customers.customer_id 
		INTO found_id
			FROM customers
				WHERE (customers.customer_login LIKE customer_login_email AND customers.customer_password LIKE customer_password_v) OR
					  (customers.customer_email LIKE customer_login_email AND customers.customer_password LIKE customer_password_v);
	
	IF found_id IS NULL then
	found_id := -1;
	END IF;
	
	return found_id;
	exception 
	   when others then 
		  return -1;
end;
$body$


//
-- Add regular contract


create or replace function create_contract(
	fk_customer_id_v contracts.fk_customer_id%TYPE,
	contract_type_v contracts.contract_type%TYPE,
	contract_price_v contracts.contract_price%TYPE,
	contract_end_date_v contracts.contract_end_date%TYPE
) returns text
language plpgsql
as
$body$
declare
   status text;
begin

	INSERT INTO contracts(fk_customer_id,contract_type,contract_price,contract_end_date) 
	VALUES (fk_customer_id_v,contract_type_v,contract_price_v,contract_end_date_v);
	
	status := '��������� �������� �������� ������!';
	

	return status;
	exception 
	   when others then
	   	  status := '������� ������� ��� ������� ���������!';
		  return status;
end;
$body$


//
-- Add child contract

create or replace function create_child_contract(
	child_name_v children_contracts.child_name%TYPE,
	fk_customer_id_v children_contracts.fk_customer_id%TYPE,
	contract_type_v children_contracts.contract_type%TYPE,
	contract_price_v children_contracts.contract_price%TYPE,
	contract_end_date_v children_contracts.contract_end_date%TYPE
) returns text
language plpgsql
as
$body$
declare
   status text;
begin

	IF child_name_v LIKE '' then
	child_name_v := NULL;
	END IF;

	INSERT INTO children_contracts(fk_customer_id,child_name,contract_type,contract_price,contract_end_date) 
	VALUES (fk_customer_id_v,child_name_v,contract_type_v,contract_price_v,contract_end_date_v);
	
	status := '��������� �������� ��� ������ �������� ������!';
	

	return status;
	exception 
	   when others then
	   	  status := '������� ������� ��� ������� ���������!';
		  return status;
end;
$body$


//
--SELECT * FROM contracts
-- Test
--SELECT create_child_contract('Michael',2,'Life', 10, '2020-10-22');
--SELECT create_contract(2, 'Life', 10, '2020-10-22');
--SELECT login_customer('Tester','123456');
--SELECT register_customer('Tester2','123456','test_em',21,'','encrypt2');